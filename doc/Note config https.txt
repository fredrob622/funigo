PS D:\funigo\backend> npm install https

added 1 package, and audited 151 packages in 2s

18 packages are looking for funding
  run `npm fund` for details

10 vulnerabilities (3 low, 1 moderate, 5 high, 1 critical)

To address issues that do not require attention, run:
  npm audit fix

To address all issues (including breaking changes), run:
  npm audit fix --force

Run `npm audit` for details.
PS D:\funigo\backend> 


*****************************************************************

PS D:\funigo\cert-funigo\funigofr> dir


    Répertoire : D:\funigo\cert-funigo\funigofr


Mode                 LastWriteTime         Length Name
----                 -------------         ------ ----
-a----        25/02/2025     21:35           1277 cert.pem
-a----        25/02/2025     21:35           1566 chain.pem
-a----        25/02/2025     21:35           2843 fullchain.pem
-a----        25/02/2025     21:35            241 privkey.pem
-a----        13/08/2023     18:15            706 README

********************************************************************

Configuration d'Apache pour utiliser le certificat:

Ouvrez le fichier de configuration d'Apache, généralement situé à C:\Program Files\Apache Group\Apache2\conf\httpd.conf.

Assurez-vous que les modules SSL sont chargés en décommentant ces lignes :

text
LoadModule ssl_module modules/mod_ssl.so
Include conf/extra/httpd-ssl.conf
Configuration du VirtualHost SSL:

Modifiez le fichier httpd-ssl.conf dans le répertoire conf/extra pour inclure vos certificats :

text
<VirtualHost _default_:443>
    DocumentRoot "D:/funigo"
    ServerName votredomaine.com:443
    SSLEngine on
    SSLCertificateFile "D:/funigo/cert-funigo/fullchain.pem"
    SSLCertificateKeyFile "D:/funigo/cert-funigo/cert.pem"
    # Autres configurations nécessaires
</VirtualHost>

***********************************************************************************

// importer l'application app.js
const https = require('https');
const app = require("./app");
const fs = require('fs');
const cors = require('cors');

// Importer le package pour utiliser les variables d'environnement
const dotenv = require("dotenv");
// La méthode config charge les variables dans le fichier process.env.
const result = dotenv.config();


const express = require('express');

const options = {
  key: fs.readFileSync('D:/funigo/cert-funigo/funigofr/privkey.pem'),
  cert: fs.readFileSync('D:/funigo/cert-funigo/funigofr/fullchain.pem'),
  ca: fs.readFileSync('D:/funigo/cert-funigo/funigofr/chain.pem')
};

app.use(cors({
  origin: 'https://funigo.fr',
  methods: ['GET', 'POST', 'PUT', 'DELETE'], // Méthodes autorisées
  credentials: true // Si vous utilisez des cookies ou des sessions
}));

// app.use(cors());

// configurer le port avec la methode set de express. Attribut la valeur process.env.PORT (3000) à port
app.set("port", process.env.PORT);

//  URL http://localhost:5000/ renvoie   "Hello world"
app.get('/', (req, res) => {
  res.send(`Hello World! vous êtes sur localhost et le port ${process.env.PORT} => URL http://localhost:5000/ !`)
});

// Créer le serveur HTTPS
https.createServer(options, app).listen(5000, () => {
  console.log('Serveur HTTPS en écoute sur le port 5000');
});

*************************************************************************************************************************

httpd.conf

Define SRVROOT "D:/Apache24"

ServerRoot "${SRVROOT}"

Listen 80

LoadModule actions_module modules/mod_actions.so
LoadModule alias_module modules/mod_alias.so
LoadModule allowmethods_module modules/mod_allowmethods.so
LoadModule asis_module modules/mod_asis.so
LoadModule auth_basic_module modules/mod_auth_basic.so
LoadModule authn_core_module modules/mod_authn_core.so
LoadModule authn_file_module modules/mod_authn_file.so
LoadModule authz_core_module modules/mod_authz_core.so
LoadModule authz_groupfile_module modules/mod_authz_groupfile.so
LoadModule authz_host_module modules/mod_authz_host.so
LoadModule authz_user_module modules/mod_authz_user.so
LoadModule autoindex_module modules/mod_autoindex.so
LoadModule cgi_module modules/mod_cgi.so
LoadModule dir_module modules/mod_dir.so
LoadModule env_module modules/mod_env.so
LoadModule headers_module modules/mod_headers.so
LoadModule isapi_module modules/mod_isapi.so
LoadModule log_config_module modules/mod_log_config.so
LoadModule mime_module modules/mod_mime.so
LoadModule negotiation_module modules/mod_negotiation.so
LoadModule proxy_module modules/mod_proxy.so
LoadModule proxy_http_module modules/mod_proxy_http.so
LoadModule proxy_http2_module modules/mod_proxy_http2.so
LoadModule rewrite_module modules/mod_rewrite.so
LoadModule setenvif_module modules/mod_setenvif.so
LoadModule socache_shmcb_module modules/mod_socache_shmcb.so
LoadModule ssl_module modules/mod_ssl.so

# ServerAdmin: Your address, where problems with the server should be
# e-mailed.  This address appears on some server-generated pages, such
# as error documents.  e.g. admin@your-domain.com
#
ServerAdmin admin@example.com

# ServerName gives the name and port that the server uses to identify itself.
# This can often be determined automatically, but we recommend you specify
# it explicitly to prevent problems during startup.
#
# If your host doesn't have a registered DNS name, enter its IP address here.
#
ServerName localhost:80

# Deny access to the entirety of your server's filesystem. You must
# explicitly permit access to web content directories in other 
# <Directory> blocks below.
#
<Directory />
    AllowOverride none
    Require all denied
</Directory>

# DocumentRoot: The directory out of which you will serve your
# documents. By default, all requests are taken from this directory, but
# symbolic links and aliases may be used to point to other locations.
#
DocumentRoot "${SRVROOT}/htdocs"
<Directory "${SRVROOT}/htdocs">

    # Possible values for the Options directive are "None", "All",
    # or any combination of:
    #   Indexes Includes FollowSymLinks SymLinksifOwnerMatch ExecCGI MultiViews
   Options Indexes FollowSymLinks
   
   
# AllowOverride controls what directives may be placed in .htaccess files.
    # It can be "All", "None", or any combination of the keywords:
    #   AllowOverride FileInfo AuthConfig Limit
    #
    AllowOverride None

    # AllowOverride controls what directives may be placed in .htaccess files.
    # It can be "All", "None", or any combination of the keywords:
    #   AllowOverride FileInfo AuthConfig Limit
    #
    AllowOverride None

    #
    # Controls who can get stuff from this server.
    #
    Require all granted
</Directory>

# DirectoryIndex: sets the file that Apache will serve if a directory
# is requested.
#
<IfModule dir_module>
    DirectoryIndex index.html
</IfModule>

# The following lines prevent .htaccess and .htpasswd files from being 
# viewed by Web clients. 
#
<Files ".ht*">
    Require all denied
</Files>

# ErrorLog: The location of the error log file.
# If you do not specify an ErrorLog directive within a <VirtualHost>
# container, error messages relating to that virtual host will be
# logged here.  If you *do* define an error logfile for a <VirtualHost>
# container, that host's errors will be logged there and not here.
#
ErrorLog "logs/error.log"

#
# LogLevel: Control the number of messages logged to the error_log.
# Possible values include: debug, info, notice, warn, error, crit,
# alert, emerg.
#
LogLevel warn

# Virtual hosts
Include conf/extra/httpd-vhosts.conf

# Secure (SSL/TLS) connections
Include conf/extra/httpd-ssl.conf

**********************************************************************************
fichier conf/extra/httpd-vhosts.conf

<VirtualHost *:80>
	DocumentRoot "D:/funigo/frontend/"
	ServerName funigo.fr
	ServerAdmin admin@example.com
	ServerAlias www.funigo.fr
	ErrorLog "${SRVROOT}/logs/funigo-error.log"
	TransferLog "${SRVROOT}/logs/funigo-access.log"
	
	 # Activer le proxy
    ProxyPreserveHost On
    ProxyPass /api http://localhost:5000/
    ProxyPassReverse /api http://localhost:5000/
	
	
    # Configurer les en-têtes CORS si nécessaire
    <Location /api>
        Header set Access-Control-Allow-Origin "https://funigo.fr"
        Header set Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS"
        Header set Access-Control-Allow-Headers "Content-Type, Authorization"
    </Location>
	
	<Directory D:/funigo/frontend/>
			Options Indexes FollowSymLinks
			AllowOverride None
			Require all granted
	</Directory>
</VirtualHost>

<VirtualHost *:443>
	DocumentRoot "D:/funigo/frontend/"
	ServerName funigo.fr
	ServerAlias funigo.fr *.funigo.fr
	ServerAdmin admin@ex#ample.com
	ErrorLog "${SRVROOT}/logs/funigoSSL-error.log"
	TransferLog "${SRVROOT}/logs/funigoSSL-access.log"
	
	SSLEngine on
	SSLCertificateFile "${SRVROOT}/conf/certificat/funigo.fr/fullchain.pem"
	SSLCertificateKeyFile "${SRVROOT}/conf/certificat/funigo.fr/privkey.pem"
	
	<Directory D:/funigo/frontend/>
			Options Indexes FollowSymLinks
			AllowOverride None
			Require all granted
	</Directory>
</VirtualHost>

*****************************************************************************************

fichier conf/extra/httpd-ssl.conf


# When we also provide SSL we have to listen to the 
# standard HTTP port (see above) and to the HTTPS port
#
Listen 443

#   SSL Engine Switch:
#   Enable/Disable SSL for this virtual host.
SSLEngine on

#   Server Certificate:
#   Point SSLCertificateFile at a PEM encoded certificate.  If
#   the certificate is encrypted, then you will be prompted for a
#   pass phrase.  Note that a kill -HUP will prompt again.  Keep
#   in mind that if you have both an RSA and a DSA certificate you
#   can configure both in parallel (to also allow the use of DSA
#   ciphers, etc.)
SSLCertificateFile "${SRVROOT}/conf/certificat/funigo.fr/fullchain.pem"

#   Server Private Key:
#   If the key is not combined with the certificate, use this
#   directive to point at the key file.  Keep in mind that if
#   you've both a RSA and a DSA private key you can configure
#   both in parallel (to also allow the use of DSA ciphers, etc.)
#   ECC keys, when in use, can also be configured in parallel
SSLCertificateKeyFile "${SRVROOT}/conf/certificat/funigo.fr/privkey.pem"